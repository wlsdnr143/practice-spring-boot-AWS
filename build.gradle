buildscript { //buildscript 코드는 이 프로젝트의 플러그인 의존성 관리를 위한 코드 *인텔리제이의 플러그인 관리가 아님
    ext { // ext는 build.gradle에서 사용하는 전역변수를 설정하겠다는 의미
        // springBootVersion 라는 전역변수를 생성
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'org.example'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories { // 각종 의존성들을 어떤 원격 저장소에서 받을지
    mavenCentral()
}
dependencies { // 프로젝트 개발에 필요한 의존성(라이브러리)들을 선언하는 곳
    //annotationProcessor 'org.projectlombok:lombok'
    compile('org.springframework.boot:spring-boot-starter-web:')
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-starter-data-jpa') // 스프링 부트용 Spring Data Jpa 추상화 라이브러리
    // 스프링 부트 버전에 맞춰 자동으로 JPA관련 라이브러리들의 버전을 관리해 줌
    compile('com.h2database:h2') // 인메모리 관계형 데이터베이스
    // 별도의 설치가 필요없이 프로젝트 의존성만으로 관리할 수 있다
    // 메모리에서 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화된다는 점을 이용하여 테스트 용도로 많이 사용된다.
    // 이 책에서는 JPA의 테스트, 로컬 환경에서의 구동에서 사용할 예정
    testCompile('org.springframework.boot:spring-boot-starter-test:')
    compile('org.springframework.boot:spring-boot-starter-mustache')
    compile('org.springframework.boot:spring-boot-starter-oauth2-client')
    compile('org.springframework.session:spring-session-jdbc')
    testCompile('org.springframework.security:spring-security-test')
}

